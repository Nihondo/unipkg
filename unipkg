#!/bin/bash

# パッケージマネージャー一覧スクリプト（モジュラー版）
# 各パッケージマネージャーからインストール済みパッケージを取得し、統一フォーマットで出力する

# 厳密なエラーハンドリングを有効化
set -euo pipefail

# スクリプトのディレクトリを取得
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# 共通ユーティリティを読み込み
source "$SCRIPT_DIR/manager/common.sh"

# パッケージマネージャーモジュールを読み込み
load_manager_module() {
    local manager="$1"
    local module_path=""
    
    case "$manager" in
        # Application package managers
        "brew") module_path="$SCRIPT_DIR/manager/application/brew.sh" ;;
        "npm") module_path="$SCRIPT_DIR/manager/application/npm.sh" ;;
        "perl") module_path="$SCRIPT_DIR/manager/application/perl.sh" ;;
        "cpan") module_path="$SCRIPT_DIR/manager/application/cpan.sh" ;;
        "pip3") module_path="$SCRIPT_DIR/manager/application/pip3.sh" ;;
        "gem") module_path="$SCRIPT_DIR/manager/application/gem.sh" ;;
        "cargo") module_path="$SCRIPT_DIR/manager/application/cargo.sh" ;;
        "go") module_path="$SCRIPT_DIR/manager/application/go.sh" ;;
        
        # System package managers
        "dnf") module_path="$SCRIPT_DIR/manager/system/dnf.sh" ;;
        "yum") module_path="$SCRIPT_DIR/manager/system/yum.sh" ;;
        "apt") module_path="$SCRIPT_DIR/manager/system/apt.sh" ;;
        "dpkg") module_path="$SCRIPT_DIR/manager/system/dpkg.sh" ;;
        "rpm") module_path="$SCRIPT_DIR/manager/system/rpm.sh" ;;
        
        # Version managers
        "nvm") module_path="$SCRIPT_DIR/manager/version/nvm.sh" ;;
        "rbenv") module_path="$SCRIPT_DIR/manager/version/rbenv.sh" ;;
        "pyenv") module_path="$SCRIPT_DIR/manager/version/pyenv.sh" ;;
        "nodenv") module_path="$SCRIPT_DIR/manager/version/nodenv.sh" ;;
        "tfenv") module_path="$SCRIPT_DIR/manager/version/tfenv.sh" ;;
        "jenv") module_path="$SCRIPT_DIR/manager/version/jenv.sh" ;;
        "asdf") module_path="$SCRIPT_DIR/manager/version/asdf.sh" ;;
        "gvm") module_path="$SCRIPT_DIR/manager/version/gvm.sh" ;;
        "rustup") module_path="$SCRIPT_DIR/manager/version/rustup.sh" ;;
        
        *) 
            warn_msg "サポートされていないマネージャー: $manager"
            return 1
            ;;
    esac
    
    if [[ -f "$module_path" ]]; then
        source "$module_path" || {
            warn_msg "モジュール $module_path の読み込みに失敗しました"
            return 1
        }
    else
        warn_msg "モジュール $module_path が見つかりません"
        return 1
    fi
}

# サポートされているパッケージマネージャー
SUPPORTED_MANAGERS=("brew" "npm" "perl" "cpan" "pip3" "gem" "cargo" "go" "dnf" "yum" "apt" "dpkg" "rpm" "nvm" "rbenv" "pyenv" "nodenv" "tfenv" "jenv" "asdf" "gvm" "rustup")

# ここから元のunipkgスクリプトの内容をコピー（一部のget_*_packages関数は除く）

# 色の定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ヘルプメッセージの表示
show_help() {
    cat << EOF
使用法: $0 [オプション] [パッケージマネージャー...]

パッケージマネージャーからインストール済みパッケージの一覧を取得します。

オプション:
    -h, --help          このヘルプメッセージを表示
    -f, --format FORMAT 出力フォーマット (table|json|csv) [デフォルト: table]
    -o, --output FILE   結果をファイルに出力
    -c, --count         パッケージ数のみを表示
    -v, --with-version  バージョン情報も表示
    -nv, --new-version  現在のバージョンと最新バージョンを表示
    -i, --info PACKAGE  指定したパッケージの詳細情報を表示
    -d, --delete PACKAGE     指定したパッケージを削除
    -u, --update [PACKAGE]  全パッケージまたは指定パッケージをアップデート
    --dry-run           実行内容を表示（実際には実行しない）
    --force             確認なしで実行
    --no-color          色の出力を無効にする

対応パッケージマネージャー:
    brew    Homebrew (macOS)
    npm     Node Package Manager
    cpan    CPAN (Perl)
    perl    Perl modules (ExtUtils::Installed使用)
    pip3    Python Package Index (pip3)
    gem     Ruby Gems
    cargo   Rust Cargo packages
    go      Go modules (installed packages)
    dnf     DNF Package Manager (Fedora/RHEL 8+)
    yum     YUM Package Manager (RHEL/CentOS)
    apt     APT Package Manager (Debian/Ubuntu)
    dpkg    DPKG Package Manager (Debian/Ubuntu)
    rpm     RPM Package Manager (Red Hat系)
    nvm     Node Version Manager
    rbenv   Ruby Version Manager
    pyenv   Python Version Manager
    nodenv  Node Version Manager (alternative)
    tfenv   Terraform Version Manager
    jenv    Java Version Manager
    asdf    Universal Version Manager
    gvm     Go Version Manager
    rustup  Rust toolchain installer

例:
    $0                  # 全パッケージマネージャーの一覧を表示
    $0 brew npm pip3    # brew、npm、pip3のみ表示
    $0 -f json          # JSON形式で出力
    $0 -c               # パッケージ数のみ表示
    $0 gem cargo        # RubyとRustのパッケージのみ表示
    $0 dnf apt          # システムパッケージマネージャーのみ表示
    $0 nvm pyenv rbenv  # バージョン管理マネージャーのみ表示
    $0 -i git           # gitパッケージの詳細情報を表示
    $0 -i express npm   # npmでexpressの詳細情報を表示
    $0 -d oldpackage    # 各パッケージマネージャーからoldpackageを削除
    $0 -d somelib npm --dry-run  # npmでsomelibの削除内容を確認
    $0 -d package --force        # 確認なしでパッケージを削除
    $0 -u                # 全パッケージマネージャーでアップデート実行
    $0 -u somepackage            # 指定パッケージのみアップデート
    $0 -u --dry-run              # アップデート内容を確認
EOF
}

# デフォルト値
OUTPUT_FORMAT="table"
OUTPUT_FILE=""
COUNT_ONLY=false
WITH_VERSION=false
NEW_VERSION=false
INFO_MODE=false
DELETE_MODE=false
UPDATE_MODE=false
PACKAGE_NAME=""
DRY_RUN=false
FORCE_MODE=false
USE_COLOR=true
REQUESTED_MANAGERS=()

# パッケージマネージャー関数を呼び出し
call_package_manager() {
    local manager="$1"
    
    # モジュールを読み込み
    load_manager_module "$manager" || return 1
    
    # 関数を呼び出し
    "get_${manager}_packages"
}

# 色の出力を制御する関数
print_colored() {
    local color="$1"
    local text="$2"
    if [[ "$USE_COLOR" == "true" ]]; then
        echo -e "${color}${text}${NC}"
    else
        echo "$text"
    fi
}

# エラーメッセージ出力
print_error() {
    print_colored "$RED" "[ERROR] $1" >&2
}

# 警告メッセージ出力
print_warning() {
    print_colored "$YELLOW" "[WARNING] $1" >&2
}

# 情報メッセージ出力
print_info() {
    print_colored "$BLUE" "[INFO] $1" >&2
}

# 成功メッセージ出力
print_success() {
    print_colored "$GREEN" "[SUCCESS] $1" >&2
}

# コマンドライン引数の解析
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -f|--format)
                if [[ -n "${2:-}" ]]; then
                    OUTPUT_FORMAT="$2"
                    shift 2
                else
                    print_error "オプション $1 には引数が必要です"
                    exit 1
                fi
                ;;
            -o|--output)
                if [[ -n "${2:-}" ]]; then
                    OUTPUT_FILE="$2"
                    shift 2
                else
                    print_error "オプション $1 には引数が必要です"
                    exit 1
                fi
                ;;
            -c|--count)
                COUNT_ONLY=true
                shift
                ;;
            -v|--with-version)
                WITH_VERSION=true
                shift
                ;;
            -nv|--new-version)
                NEW_VERSION=true
                WITH_VERSION=true
                shift
                ;;
            -i|--info)
                INFO_MODE=true
                if [[ -n "${2:-}" ]]; then
                    PACKAGE_NAME="$2"
                    shift 2
                else
                    print_error "オプション $1 には引数が必要です"
                    exit 1
                fi
                ;;
            -d|--delete)
                DELETE_MODE=true
                if [[ -n "${2:-}" ]]; then
                    PACKAGE_NAME="$2"
                    shift 2
                else
                    print_error "オプション $1 には引数が必要です"
                    exit 1
                fi
                ;;
            -u|--update)
                UPDATE_MODE=true
                if [[ -n "${2:-}" && "$2" != --* ]]; then
                    PACKAGE_NAME="$2"
                    shift 2
                else
                    shift
                fi
                ;;
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            --force)
                FORCE_MODE=true
                shift
                ;;
            --no-color)
                USE_COLOR=false
                shift
                ;;
            -*)
                print_error "不明なオプション: $1"
                exit 1
                ;;
            *)
                # パッケージマネージャー名として処理
                if [[ " ${SUPPORTED_MANAGERS[*]} " =~ " $1 " ]]; then
                    REQUESTED_MANAGERS+=("$1")
                else
                    print_error "サポートされていないパッケージマネージャー: $1"
                    exit 1
                fi
                shift
                ;;
        esac
    done
}

# 結果をファイルに出力する関数
output_to_file() {
    local data="$1"
    if [[ -n "$OUTPUT_FILE" ]]; then
        echo "$data" > "$OUTPUT_FILE"
        print_info "結果を $OUTPUT_FILE に保存しました"
    else
        echo "$data"
    fi
}

# JSON形式で出力
format_json() {
    local data="$1"
    python3 -c "
import csv
import json
import sys
from io import StringIO

data = '''$data'''
reader = csv.DictReader(StringIO(data))
result = []
for row in reader:
    result.append(row)

json.dump(result, sys.stdout, indent=2, ensure_ascii=False)
print()
"
}

# テーブル形式で出力（リッチ表示対応）
format_table() {
    local data="$1"
    
    if command -v column >/dev/null 2>&1; then
        # columnコマンドでテーブル形式に整形
        local formatted_table=$(echo "$data" | column -t -s',')
        
        # カラー出力が有効な場合はリッチ表示
        if [[ "$USE_COLOR" == "true" ]]; then
            # ヘッダー行を色付け
            echo "$formatted_table" | head -1 | sed -E "s/^([^[:space:]]+)[[:space:]]+([^[:space:]]+)/$(printf "${BLUE}%s${NC} ${GREEN}%s${NC}" "\\1" "\\2")/" | sed -E "s/([^[:space:]]+)[[:space:]]*$/$(printf "${YELLOW}%s${NC}" "\\1")/"
            
            # データ行を処理（Status列がある場合は色付け）
            echo "$formatted_table" | tail -n +2 | while IFS= read -r line; do
                if [[ "$line" =~ Latest$ ]]; then
                    # Latestステータスを緑色で表示
                    echo "$line" | sed "s/Latest$/$(printf "${GREEN}Latest${NC}")/"
                elif [[ "$line" =~ Outdated$ ]]; then
                    # Outdatedステータスを赤色で表示
                    echo "$line" | sed "s/Outdated$/$(printf "${RED}Outdated${NC}")/"
                else
                    echo "$line"
                fi
            done
        else
            echo "$formatted_table"
        fi
    else
        echo "$data"
    fi
}

# 結果のフォーマットと出力
format_and_output() {
    local csv_data="$1"
    local output=""
    
    case "$OUTPUT_FORMAT" in
        csv)
            output="$csv_data"
            ;;
        json)
            output=$(format_json "$csv_data")
            ;;
        table)
            output=$(format_table "$csv_data")
            ;;
        *)
            print_error "サポートされていない出力フォーマット: $OUTPUT_FORMAT"
            exit 1
            ;;
    esac
    
    output_to_file "$output"
}

# メイン処理
main() {
    # 引数解析
    parse_arguments "$@"
    
    # 実行するパッケージマネージャーを決定
    local managers_to_run=()
    if [[ ${#REQUESTED_MANAGERS[@]} -eq 0 ]]; then
        managers_to_run=("${SUPPORTED_MANAGERS[@]}")
    else
        managers_to_run=("${REQUESTED_MANAGERS[@]}")
    fi
    
    # 結果を収集
    local all_output=""
    for manager in "${managers_to_run[@]}"; do
        local output
        output=$(call_package_manager "$manager" 2>/dev/null || true)
        if [[ -n "$output" ]]; then
            if [[ -n "$all_output" ]]; then
                all_output="$all_output"$'\n'"$output"
            else
                all_output="$output"
            fi
        fi
    done
    
    # 結果のフォーマットと出力
    if [[ -n "$all_output" ]]; then
        # ヘッダーを追加
        local header=""
        if [[ "$COUNT_ONLY" == "true" ]]; then
            header="Manager,Count"
        elif [[ "$WITH_VERSION" == "true" ]]; then
            if [[ "$NEW_VERSION" == "true" ]]; then
                header="Manager,Package,Current Version,Latest Version,Status"
            else
                header="Manager,Package,Version"
            fi
        else
            header="Manager,Package"
        fi
        
        local final_output="$header"$'\n'"$all_output"
        format_and_output "$final_output"
    else
        print_warning "パッケージが見つかりませんでした"
    fi
}

# スクリプトが直接実行された場合のみメイン処理を実行
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi